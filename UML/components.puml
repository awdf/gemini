@startuml
allowmixing
' Set a theme for a modern look
!theme vibrant

' Enforce a top-to-bottom layout direction. This helps prevent
' components from spreading out too horizontally and improves readability.
top to bottom direction

title Application Component Diagram

' Define a stereotype for components that are run in their own goroutine
stereotype "Runnable" as r

package "Application Entrypoint" {
    component [main]
    component [App]
}

package "Core Audio Processing" {
    component [GStreamer Pipeline] as Pipeline <<r>>
    component [VAD Engine] as VAD <<r>>
    component [Recorder] as Recorder <<r>>
}

package "Artificial Intelligence" {
    component [AI Processor] as AI <<r>>
    component [Gemini API] as API <<cloud>>
}

package "Terminal Input/Output" {
    component [CLI] as CLI <<r>>
    component [RMS Display] as Display <<r>>
    component [Formatter]
}

package "Shared Services" {
    component [Config]
    component [Event Bus] as EventBus<<bus>>
    component [Flow Control] as FlowControl <<r>>
}

' =============================================
'           Component Relationships
' =============================================

main --> App : Creates & Runs

note on link
  The 'App' component acts as a
  dependency injector, creating all
  'Runnable' components and their
  communication channels.
end note

' App creates all the main runnable components.
App --> Pipeline : Creates
App --> VAD : Creates
App --> Recorder : Creates
App --> AI : Creates
App --> CLI : Creates
App --> Display : Creates

' =============================================
'        Data Flow & Interactions
' =============================================

' --- Go Channels ---
interface "rmsDisplayChan" as rmsChan
interface "vadControlChan" as vadChan
interface "aiOnDemandChan" as aiChan
interface "textCommandChan" as textChan

' Use right-directional arrows to create a clear L-R data flow for channels.
Pipeline --> rmsChan : RMS values
rmsChan --> Display

Pipeline --> vadChan : Audio data
vadChan --> VAD

Recorder --> aiChan : WAV filename
aiChan --> AI

CLI --> textChan : Text prompt
textChan --> AI

' --- Event Bus ---
note "The EventBus provides decoupled communication" as BusNote
BusNote .left. EventBus

' Use directional hints to route events "up" into the bus and "down" to subscribers.
' This helps to visually separate the publishers from the subscribers.
VAD .up.> EventBus : Publishes "recorder:start/stop"
AI .up.> EventBus : Publishes "draw"

EventBus .down.> Recorder : Subscribes
EventBus .down.> CLI : Subscribes (redraws prompt)
EventBus .down.> Display : Subscribes (redraws soundbar)

' --- Direct Calls & Dependencies ---

AI -> Formatter : Uses for output formatting
AI ..> "stdout"

' Use a dotted line for control signals (like pause/resume) to distinguish from data flow.
AI .> Pipeline : Pauses/Resumes for voice response
AI -> API : HTTP requests

' --- Shared Services Usage ---
' Use dotted dependency arrows for "uses" relationships to the Config service.
' This helps differentiate these from other connections, addressing the "merged lines" issue.
App ..> Config
AI ..> Config
VAD ..> Config
Display ..> Config

' Use a directional hint for the shutdown signal.
FlowControl .up.> App : Signals Ctrl+C for shutdown

@enduml